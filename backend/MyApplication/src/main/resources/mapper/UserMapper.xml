<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ai.companion.mapper.UserMapper">
    <resultMap id="UserResultMap" type="com.ai.companion.entity.User">
        <id property="id" column="id"/>
        <result property="userUID" column="uid"/>
        <result property="userName" column="username"/>
        <result property="gender" column="gender"/>
        <result property="privacyVisible" column="is_private"/>
        <result property="signature" column="signature"/>
        <result property="email" column="email"/>
        <result property="level" column="level"/>
        <result property="registerTime" column="created_at"/>
        <result property="updateTime" column="last_login"/>
        <result property="userAvatar" column="profile_image"/>
    </resultMap>

    <select id="selectByUID" resultMap="UserResultMap">
        SELECT * FROM users WHERE uid = #{userUID}
    </select>

    <select id="selectById" resultMap="UserResultMap">
        SELECT * FROM users WHERE id = #{id}
    </select>

    <select id="selectByEmail" resultMap="UserResultMap">
        SELECT * FROM users WHERE email = #{email}
    </select>

    <select id="selectByUserName" resultMap="UserResultMap">
        SELECT * FROM users WHERE username = #{userName}
    </select>

    <select id="selectByPage" resultMap="UserResultMap">
        SELECT * FROM users 
        ORDER BY created_at DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <select id="selectByUserNameLike" resultMap="UserResultMap">
        SELECT * FROM users 
        WHERE username LIKE CONCAT('%', #{userName}, '%')
        ORDER BY created_at DESC
    </select>

    <select id="selectByEmailLike" resultMap="UserResultMap">
        SELECT * FROM users 
        WHERE email LIKE CONCAT('%', #{email}, '%')
        ORDER BY created_at DESC
    </select>

    <select id="selectByLevel" resultMap="UserResultMap">
        SELECT * FROM users WHERE level = #{level}
    </select>

    <select id="selectByGender" resultMap="UserResultMap">
        SELECT * FROM users WHERE gender = #{gender}
    </select>

    <select id="selectByPrivacy" resultMap="UserResultMap">
        SELECT * FROM users WHERE is_private = #{privacyVisible}
    </select>

    <select id="selectByConditions" resultMap="UserResultMap">
        SELECT * FROM users 
        <where>
            <if test="userName != null and userName != ''">
                AND username LIKE CONCAT('%', #{userName}, '%')
            </if>
            <if test="email != null and email != ''">
                AND email LIKE CONCAT('%', #{email}, '%')
            </if>
            <if test="level != null">
                AND level = #{level}
            </if>
            <if test="gender != null and gender != ''">
                AND gender = #{gender}
            </if>
            <if test="privacyVisible != null">
                AND is_private = #{privacyVisible}
            </if>
        </where>
        ORDER BY created_at DESC
    </select>

    <select id="selectLatestUsers" resultMap="UserResultMap">
        SELECT * FROM users 
        ORDER BY created_at DESC
        LIMIT #{limit}
    </select>

    <select id="selectByRegisterTimeRange" resultMap="UserResultMap">
        SELECT * FROM users 
        WHERE created_at BETWEEN #{startTime} AND #{endTime}
        ORDER BY created_at DESC
    </select>

    <select id="searchUsers" resultMap="UserResultMap">
        SELECT * FROM users 
        WHERE username LIKE CONCAT('%', #{keyword}, '%')
           OR email LIKE CONCAT('%', #{keyword}, '%')
        ORDER BY 
            CASE 
                WHEN username LIKE CONCAT('%', #{keyword}, '%') THEN 1
                ELSE 2
            END,
            created_at DESC
        LIMIT #{limit}
    </select>

    <insert id="insertUser" parameterType="com.ai.companion.entity.User" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO users (uid, username, gender, is_private, signature, email, level, created_at, last_login, profile_image)
        VALUES (#{userUID}, #{userName}, #{gender}, #{privacyVisible}, #{signature}, #{email}, #{level}, #{registerTime}, #{updateTime}, #{userAvatar})
    </insert>

    <update id="updateUser" parameterType="com.ai.companion.entity.User">
        UPDATE users
        SET username=#{userName}, gender=#{gender}, is_private=#{privacyVisible}, signature=#{signature},
            email=#{email}, level=#{level}, last_login=#{updateTime}, profile_image=#{userAvatar}
        WHERE uid=#{userUID}
    </update>

    <delete id="deleteUser">
        DELETE FROM users WHERE uid=#{userUID}
    </delete>

    <delete id="deleteUserById">
        DELETE FROM users WHERE id=#{id}
    </delete>

    <delete id="batchDeleteUsers">
        DELETE FROM users WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <update id="batchUpdateUserLevel">
        UPDATE users SET level = #{level} WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

    <select id="existsByUserName" resultType="boolean">
        SELECT COUNT(*) > 0 FROM users 
        WHERE username = #{userName}
        <if test="excludeId != null">
            AND id != #{excludeId}
        </if>
    </select>

    <select id="existsByEmail" resultType="boolean">
        SELECT COUNT(*) > 0 FROM users 
        WHERE email = #{email}
        <if test="excludeId != null">
            AND id != #{excludeId}
        </if>
    </select>

    <select id="existsByUserUID" resultType="boolean">
        SELECT COUNT(*) > 0 FROM users WHERE uid = #{userUID}
    </select>

    <select id="selectByIds" resultMap="UserResultMap">
        SELECT * FROM users WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
        ORDER BY created_at DESC
    </select>

    <select id="countAll" resultType="int">
        SELECT COUNT(*) FROM users
    </select>

    <select id="countByLevel" resultType="int">
        SELECT COUNT(*) FROM users WHERE level = #{level}
    </select>

    <select id="countByGender" resultType="int">
        SELECT COUNT(*) FROM users WHERE gender = #{gender}
    </select>

    <select id="countTodayRegistered" resultType="int">
        SELECT COUNT(*) FROM users 
        WHERE DATE(created_at) = CURDATE()
    </select>

    <select id="selectUserLevelDistribution" resultMap="UserResultMap">
        SELECT level, COUNT(*) as count 
        FROM users 
        GROUP BY level 
        ORDER BY level
    </select>

    <select id="selectAll" resultMap="UserResultMap">
        SELECT * FROM users
    </select>
</mapper> 