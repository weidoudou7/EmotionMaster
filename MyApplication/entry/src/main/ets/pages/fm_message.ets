import router from '@ohos.router'
import { fetchWeather } from '../model/WeatherService';
import { ApiService } from '../service/apiservice';
import { Conversation, AiRole } from '../common/types';

class WeatherInfo {
  city: string = 'Âä†ËΩΩ‰∏≠';
  temperature: string = '--¬∞';
  icon: string = '‚ùì';
  desc: string = 'Âä†ËΩΩ‰∏≠';
}
class MessageItem {
  avatar: Resource = $r('app.media.splash');
  name: string = '';
  desc: string = '';
  time: string = '';
  followed: boolean = false;
  unread: number = 0;
  isOfficial?: boolean = false;
  isSystem?: boolean = false;
}
@Entry
@Component
export struct MessagePage {
  @State weatherInfo: WeatherInfo = new WeatherInfo();
  @State currentTime: string = '';
  @State currentDate: string = '';
  @State private conversations: Conversation[] = [];
  @State private aiRoleMap: Record<number, AiRole> = {};
  private timerId: number = -1;

  aboutToAppear() {
    this.getWeatherByLocation();
    this.updateDateTime();
    this.loadConversations();
    this.timerId = setInterval(() => {
      this.updateDateTime();
    }, 1000);
  }

  aboutToDisappear() {
    // Ê∏ÖÁêÜÂÆöÊó∂Âô®
    if (this.timerId !== -1) {
      clearInterval(this.timerId);
      this.timerId = -1;
    }
  }

  updateDateTime() {
    const now = new Date();
    
    // Ê†ºÂºèÂåñÊó∂Èó¥ HH:MM
    const hours = now.getHours().toString().padStart(2, '0');
    const minutes = now.getMinutes().toString().padStart(2, '0');
    this.currentTime = `${hours}:${minutes}`;
    
    // Ê†ºÂºèÂåñÊó•ÊúüÂíåÊòüÊúü
    const year = now.getFullYear();
    const month = (now.getMonth() + 1).toString().padStart(2, '0');
    const day = now.getDate().toString().padStart(2, '0');
    const weekdays = ['ÊòüÊúüÊó•', 'ÊòüÊúü‰∏Ä', 'ÊòüÊúü‰∫å', 'ÊòüÊúü‰∏â', 'ÊòüÊúüÂõõ', 'ÊòüÊúü‰∫î', 'ÊòüÊúüÂÖ≠'];
    const weekday = weekdays[now.getDay()];
    this.currentDate = `${year}Âπ¥${month}Êúà${day}Êó• ${weekday}`;
  }

  async getWeatherByLocation() {
    const data = await fetchWeather('101200101'); // Ê≠¶Ê±â
    console.log('fetchWeatherËøîÂõû:', JSON.stringify(data));
    if (data && data.status === 200 && data.data && data.cityInfo) {
      this.weatherInfo.city = data.cityInfo.city;
      this.weatherInfo.temperature = data.data.wendu + '¬∞';
      this.weatherInfo.desc = data.data.forecast && data.data.forecast.length > 0 ? data.data.forecast[0].type : '';
      this.weatherInfo.icon = this.iconMap(this.weatherInfo.desc);
    } else {
      this.weatherInfo.city = 'Ëé∑ÂèñÂ§±Ë¥•';
      this.weatherInfo.temperature = '--¬∞';
      this.weatherInfo.desc = 'Â§©Ê∞îËé∑ÂèñÂ§±Ë¥•';
      this.weatherInfo.icon = '‚ùå';
    }
  }

  iconMap(desc: string): string {
    switch (desc) {
      case 'Êô¥': return '‚òÄÔ∏è';
      case 'Â§ö‰∫ë': return 'üå§Ô∏è';
      case 'Èò¥': return '‚òÅÔ∏è';
      case 'Â∞èÈõ®': return 'üåßÔ∏è';
      case '‰∏≠Èõ®': return 'üåßÔ∏è';
      case 'Â§ßÈõ®': return '‚õàÔ∏è';
      case 'Èõ∑ÈòµÈõ®': return '‚õàÔ∏è';
      case 'Èõ™': return '‚ùÑÔ∏è';
      case 'Èõæ': return 'üå´Ô∏è';
      default: return '‚ùì';
    }
  }

  async loadConversations() {
    try {
      const conversations = await ApiService.getConversationsByUserId();
      this.conversations = conversations;
      // ÊâπÈáèËé∑ÂèñAIËßíËâ≤‰ø°ÊÅØ
      const aiRoleIds = Array.from(new Set(conversations.map(c => c.aiRoleId)));
      const aiRoleMap: Record<number, AiRole> = {};
      for (const id of aiRoleIds) {
        try {
          aiRoleMap[id] = await ApiService.getAiRoleById(id);
        } catch (e) {
          // Â§±Ë¥•ÂàôË∑≥Ëøá
        }
      }
      this.aiRoleMap = aiRoleMap;
    } catch (e) {
      console.error('Âä†ËΩΩ‰ºöËØùÂ§±Ë¥•', e);
    }
  }

  build(): void {
    Column() {
      // Â§©Ê∞îÂç°ÁâáÈÉ®ÂàÜ
      Stack() {
        Column() {
          Row() {
            Text(this.weatherInfo.temperature)
              .fontSize(48)
              .fontWeight(FontWeight.Bold)
              .fontColor('#fff')
              .margin({ left: 16, top: 10, bottom: 4, right: 8 })
            Column() {
              Text(this.weatherInfo.city)
                .fontSize(16)
                .fontWeight(FontWeight.Bold)
                .fontColor('#fff')
                .margin({ bottom: 1 })
              Text(this.weatherInfo.desc)
                .fontSize(13)
                .fontColor('#fff')
                .margin({ bottom: 1 })
            }
            .margin({ top: 10 })
            Blank().width('1fr')
            Column() {
              Text(this.weatherInfo.icon)
                .fontSize(32)
                .margin({ top: 4, right: 12 })
            }
          }
          
          // ÂΩìÂâçÊó∂Èó¥Êó•Êúü
          Column() {
            Text(this.currentTime)
              .fontSize(20)
              .fontColor('#fff')
              .fontWeight(FontWeight.Bold)
              .margin({ top: 8, bottom: 4 })
            Text(this.currentDate)
              .fontSize(12)
              .fontColor('#fff')
              .opacity(0.9)
              .margin({ bottom: 8 })
          }
          .alignItems(HorizontalAlign.Center)
        }
        .width('100%')
        .height(140)
        .backgroundColor('rgba(34,34,34,0.7)')
        .borderRadius(24)
        .margin({ left: 8, right: 8, top: 8, bottom: 12 })
        .shadow({ radius: 8, color: '#00000022', offsetX: 0, offsetY: 2 })
      }
      // Ê∂àÊÅØÂàóË°®
      List() {
        ForEach(this.conversations, (conv: Conversation, idx: number) => {
          ListItem() {
            Row() {
              Image(this.aiRoleMap[conv.aiRoleId]?.avatarUrl )
                .width(48)
                .height(48)
                .borderRadius(24)
                .margin({ left: 16, right: 12 })
              Column({ space: 4 }) {
                Text(conv.title)
                  .fontSize(16)
                  .fontColor('#fff')
                  .fontWeight(FontWeight.Bold)
                Text('') // ÂèØÊâ©Â±ï‰∏∫ÊëòË¶Å
                  .fontSize(13)
                  .fontColor('#bbb')
                  .maxLines(1)
                  .margin({ top: 2 })
              }
              .layoutWeight(1)
              Column() {
                Text(conv.lastActive ? conv.lastActive.replace('T', ' ').slice(0, 16) : '')
                  .fontSize(12)
                  .fontColor('#888')
                  .margin({ bottom: 8 })
              }
              .alignItems(HorizontalAlign.End)
              .margin({ right: 16 })
            }
            .height(64)
            .backgroundColor('rgba(34,34,34,0)')
          }
          .onClick(() => {
            const aiRole = this.aiRoleMap[conv.aiRoleId];
            console.log('ËßíËâ≤ID:', aiRole.id);
            router.pushUrl({
              url: 'pages/chat',
              params: {
                figureImageUrl: aiRole?.avatarUrl ,
                figureType: aiRole?.roleType ,
                figureName: aiRole?.roleName ,
                isFromCreateFigure: false,
                description: aiRole?.roleDescription ,
                createdAiRoleId: aiRole?.id
              }
            });
          })
        }, (conv: Conversation) => conv.id.toString())
      }
      .width('100%')
      .backgroundColor('#181818')
      .layoutWeight(1)
      Blank().height(56)
    }
    .width('100%')
    .height('100%')
    .backgroundColor('#181818')
  }
} 